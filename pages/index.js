// NEXT
import Head from "next/head";
// COMP
import Header from "../components/Header";
import CreateNewDoc from "../components/CreateNewDoc";
import NewDocModal from "../components/NewDocModal";
import DocumentRow from "../components/DocumentRow";
// ASSETS
import { IoMdFolder } from "react-icons/io";
import { HiDotsVertical, HiDotsHorizontal } from "react-icons/hi";
// REACT
import { useEffect, useState } from "react";
// RECOIL
import { useRecoilState } from "recoil";
import { newDocModalState } from "../atoms/newDocModalAtom";
import { deleteDocModalState } from "../atoms/deleteDocModalAtom";
import { docsState } from "../atoms/docsAtom";
// NEXT-AUTH
import { useSession, getSession } from "next-auth/react";
// FIREBASE
import {
  collection,
  doc,
  getDocs,
  onSnapshot,
  query,
  setDoc,
} from "firebase/firestore";
import { db } from "../firebase";
import DeleteDocModal from "../components/DeleteDocModal";

export default function Home() {
  const { data: session } = useSession();
  const [open, setOpen] = useRecoilState(newDocModalState);
  const [deleteOpen, setDeleteOpen] = useRecoilState(deleteDocModalState);
  const [userDocuments, setUserDocuments] = useRecoilState(docsState);
  const [deleteDocs, setDeleteDocs] = useState(false);

  // NOTES -- ADDS USER TO FIREBASE
  useEffect(() => {
    const addUserToFirebase = async () => {
      const usersQuery = query(collection(db, "users"));

      const usersSnapshot = await getDocs(usersQuery);

      // IF NO USERS CREATE USER
      if (usersSnapshot.docs.length === 0) {
        await setDoc(doc(db, "users", session.user.uid), {
          name: session.user.name,
          email: session.user.email,
          image: session.user.image,
        });
      } else if (usersSnapshot.docs.length > 0) {
        // IF THERE ARE USERS
        const usersQuery = query(collection(db, "users"));
        const usersSnapshot = await getDocs(usersQuery);

        const sessionID = session.user.uid;
        const users = [];
        // MAPS ALL THE USER.UID STORED IN FIREBASE INTO AN ARRAY
        usersSnapshot.docs.map((userDoc) => {
          return users.push(userDoc.id);
        });

        // IF THE ARR INCLUDES THE CURRENT SESSIONID VALUE, THEN THE USER ALREADY EXISTS && RETURN
        if (users.includes(sessionID)) {
          return;
        } else {
          // CREATE USER
          await setDoc(doc(db, "users", session.user.uid), {
            name: session.user.name,
            email: session.user.email,
            image: session.user.image,
          });
        }
      }
    };
    addUserToFirebase();
  }, []);

  // NOTES -- GETS POSTS
  useEffect(() => {
    const getUserDocs = async () => {
      const querySnapshot = await getDocs(
        collection(db, "userDocs", session.user.email, "docs")
      );

      const userDocsArr = [];
      querySnapshot.forEach((doc) => {
        return userDocsArr.push({ id: doc.id, data: doc.data() });
      });
      setUserDocuments(userDocsArr);
    };
    getUserDocs();
    console.log(userDocuments);
  }, []);

  return (
    <div className="relative">
      {open && <NewDocModal />}
      {deleteOpen && <DeleteDocModal />}
      <Head>
        <title>Google_Docs</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Header homepage />

      {/* NEW DOCUMENT SECTION */}
      <CreateNewDoc />

      <section
        className=" max-h-[63.35vh]  overflow-y-scroll"
        id="user-doc-div"
      >
        <div className="px-10 xl:px-0 xl:max-w-4xl mx-auto pt-8 pb-4 ">
          <div className="sticky top-0 w-full bg-gray-100 rounded-lg">
            <div className="  flex items-center justify-between p-2 text-sm md:text-lg z-50">
              {!deleteDocs && (
                <>
                  <h1 className="font-normal">My Documents</h1>
                  <h1 className="font-normal ml-16 md:ml-40 lg:ml-60 xl:ml-80">
                    Date Created
                  </h1>
                </>
              )}
              {deleteDocs && (
                <>
                  <h1 className="font-normal">Delete Documents</h1>
                  <h1 className="font-normal md:ml-40 lg:ml-60 xl:ml-75">
                    Date Created
                  </h1>
                </>
              )}

              <div className="flex items-center">
                <div
                  className="p-2 md:p-3 hover:bg-gray-200 hover:transition-all rounded-full cursor-pointer"
                  onClick={() => setDeleteDocs(!deleteDocs)}
                >
                  {!deleteDocs && <HiDotsVertical className="text-xl" />}
                  {deleteDocs && <HiDotsHorizontal className="text-xl" />}
                </div>
              </div>
            </div>
          </div>
        </div>
        {userDocuments?.map((doc) => {
          return (
            <DocumentRow
              key={doc.id}
              id={doc.id}
              fileName={doc.data.fileName}
              date={doc.data.timestamp}
              deleteDocs={deleteDocs}
            />
          );
        })}
      </section>
    </div>
  );
}

export async function getServerSideProps(context) {
  const session = await getSession(context);

  if (!session) {
    return {
      redirect: {
        destination: "/auth/signin",
        permanent: false,
      },
    };
  }

  return {
    props: { session },
  };
}
